// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model NewsImage {
  id        Int      @id @default(autoincrement())
  url       String
  newsId    Int
  news      News     @relation(fields: [newsId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  firstName String
  lastName  String
  userName  String
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      Role      @default(USER)
  comment   Comment[]
  posts     News[]
  Likes     Likes[]
}

model News {
  id            Int         @id @default(autoincrement())
  title         String
  category      String
  description   String
  content       String
  author        User        @relation(fields: [authorId], references: [id])
  authorId      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isDeleted     Boolean     @default(false)
  images        NewsImage[]
  isActive      Boolean     @default(true)
  emailVerified Boolean     @default(false)
  Comment       Comment[]
  Likes         Likes[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  news      News     @relation(fields: [newsId], references: [id])
  newsId    Int
  Likes     Likes[]
}

model Likes {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  news      News?    @relation(fields: [newsId], references: [id])
  newsId    Int?

  @@unique([authorId, commentId, newsId]) // Prevent duplicate likes
}
